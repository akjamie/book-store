apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: redis
  name: redis
spec:
  serviceName: redis-headless
  replicas: 2
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: init-redis
        image: redis:6.2.7
        command:
          - bash
          - "-c"
          - |
            set -ex
            # Generate mysql server-id from pod ordinal index.
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            # Copy appropriate conf.d files from config-map to emptyDir.
            if [[ $ordinal -eq 0 ]]; then
              cp /mnt/config-map/master.conf /etc/redis/redis.conf
            else
              cp /mnt/config-map/slave.conf /etc/redis/redis.conf
            fi
        volumeMounts:
        - name: conf
          mountPath: /etc/redis
          subPath: redis.conf
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: redis
        image: redis:6.2.7
        command:
        - "redis-server"
        args:
        - "/etc/redis/redis.conf"
        - "--protected-mode"
        - "no"
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        ports:
        - name: redis
          containerPort: 6379
        volumeMounts:
        - name: conf
          mountPath: /etc/redis
          subPath: redis.conf
        - name: config-map
          mountPath: /mnt/config-map
        - name: redis-data
          mountPath: /data
      volumes:
        - name: config-map
          configMap:
            name: redis-config
        - name: conf
          emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: managed-nfs-storage
      resources:
        requests:
          storage: 200Mi